// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kuka/ecs/v1/motion_services_ecs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kuka/motion/external/external_control_mode.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
namespace kuka {
namespace ecs {
namespace v1 {
class CommandState;
class CommandStateDefaultTypeInternal;
extern CommandStateDefaultTypeInternal _CommandState_default_instance_;
class ObserveControlStateRequest;
class ObserveControlStateRequestDefaultTypeInternal;
extern ObserveControlStateRequestDefaultTypeInternal _ObserveControlStateRequest_default_instance_;
class OpenControlChannelRequest;
class OpenControlChannelRequestDefaultTypeInternal;
extern OpenControlChannelRequestDefaultTypeInternal _OpenControlChannelRequest_default_instance_;
class OpenControlChannelResponse;
class OpenControlChannelResponseDefaultTypeInternal;
extern OpenControlChannelResponseDefaultTypeInternal _OpenControlChannelResponse_default_instance_;
class StartMonitoringRequest;
class StartMonitoringRequestDefaultTypeInternal;
extern StartMonitoringRequestDefaultTypeInternal _StartMonitoringRequest_default_instance_;
class StartMonitoringResponse;
class StartMonitoringResponseDefaultTypeInternal;
extern StartMonitoringResponseDefaultTypeInternal _StartMonitoringResponse_default_instance_;
class StopMonitoringRequest;
class StopMonitoringRequestDefaultTypeInternal;
extern StopMonitoringRequestDefaultTypeInternal _StopMonitoringRequest_default_instance_;
class StopMonitoringResponse;
class StopMonitoringResponseDefaultTypeInternal;
extern StopMonitoringResponseDefaultTypeInternal _StopMonitoringResponse_default_instance_;
}  // namespace v1
}  // namespace ecs
}  // namespace kuka
PROTOBUF_NAMESPACE_OPEN
template<> ::kuka::ecs::v1::CommandState* Arena::CreateMaybeMessage<::kuka::ecs::v1::CommandState>(Arena*);
template<> ::kuka::ecs::v1::ObserveControlStateRequest* Arena::CreateMaybeMessage<::kuka::ecs::v1::ObserveControlStateRequest>(Arena*);
template<> ::kuka::ecs::v1::OpenControlChannelRequest* Arena::CreateMaybeMessage<::kuka::ecs::v1::OpenControlChannelRequest>(Arena*);
template<> ::kuka::ecs::v1::OpenControlChannelResponse* Arena::CreateMaybeMessage<::kuka::ecs::v1::OpenControlChannelResponse>(Arena*);
template<> ::kuka::ecs::v1::StartMonitoringRequest* Arena::CreateMaybeMessage<::kuka::ecs::v1::StartMonitoringRequest>(Arena*);
template<> ::kuka::ecs::v1::StartMonitoringResponse* Arena::CreateMaybeMessage<::kuka::ecs::v1::StartMonitoringResponse>(Arena*);
template<> ::kuka::ecs::v1::StopMonitoringRequest* Arena::CreateMaybeMessage<::kuka::ecs::v1::StopMonitoringRequest>(Arena*);
template<> ::kuka::ecs::v1::StopMonitoringResponse* Arena::CreateMaybeMessage<::kuka::ecs::v1::StopMonitoringResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kuka {
namespace ecs {
namespace v1 {

enum CommandEvent : int {
  CONTROL_EVENT_UNSPECIFIED = 0,
  IDLE = 1,
  COMMAND_READY = 2,
  SAMPLING = 3,
  STOPPED = 4,
  ERROR = 6,
  CommandEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandEvent_IsValid(int value);
constexpr CommandEvent CommandEvent_MIN = CONTROL_EVENT_UNSPECIFIED;
constexpr CommandEvent CommandEvent_MAX = ERROR;
constexpr int CommandEvent_ARRAYSIZE = CommandEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandEvent_descriptor();
template<typename T>
inline const std::string& CommandEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandEvent_descriptor(), enum_t_value);
}
inline bool CommandEvent_Parse(
    const std::string& name, CommandEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandEvent>(
    CommandEvent_descriptor(), name, value);
}
// ===================================================================

class OpenControlChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.OpenControlChannelRequest) */ {
 public:
  inline OpenControlChannelRequest() : OpenControlChannelRequest(nullptr) {};
  virtual ~OpenControlChannelRequest();

  OpenControlChannelRequest(const OpenControlChannelRequest& from);
  OpenControlChannelRequest(OpenControlChannelRequest&& from) noexcept
    : OpenControlChannelRequest() {
    *this = ::std::move(from);
  }

  inline OpenControlChannelRequest& operator=(const OpenControlChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenControlChannelRequest& operator=(OpenControlChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenControlChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenControlChannelRequest* internal_default_instance() {
    return reinterpret_cast<const OpenControlChannelRequest*>(
               &_OpenControlChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenControlChannelRequest& a, OpenControlChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenControlChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenControlChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenControlChannelRequest* New() const final {
    return CreateMaybeMessage<OpenControlChannelRequest>(nullptr);
  }

  OpenControlChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenControlChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenControlChannelRequest& from);
  void MergeFrom(const OpenControlChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenControlChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.OpenControlChannelRequest";
  }
  protected:
  explicit OpenControlChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityThresholdFieldNumber = 4,
    kTimeoutFieldNumber = 1,
    kCycleTimeFieldNumber = 2,
    kExternalControlModeFieldNumber = 3,
  };
  // repeated double velocity_threshold = 4;
  int velocity_threshold_size() const;
  private:
  int _internal_velocity_threshold_size() const;
  public:
  void clear_velocity_threshold();
  private:
  double _internal_velocity_threshold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity_threshold() const;
  void _internal_add_velocity_threshold(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity_threshold();
  public:
  double velocity_threshold(int index) const;
  void set_velocity_threshold(int index, double value);
  void add_velocity_threshold(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity_threshold();

  // uint32 timeout = 1;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cycle_time = 2;
  void clear_cycle_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 cycle_time() const;
  void set_cycle_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cycle_time() const;
  void _internal_set_cycle_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kuka.motion.external.ExternalControlMode external_control_mode = 3;
  void clear_external_control_mode();
  ::kuka::motion::external::ExternalControlMode external_control_mode() const;
  void set_external_control_mode(::kuka::motion::external::ExternalControlMode value);
  private:
  ::kuka::motion::external::ExternalControlMode _internal_external_control_mode() const;
  void _internal_set_external_control_mode(::kuka::motion::external::ExternalControlMode value);
  public:

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.OpenControlChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_threshold_;
  mutable std::atomic<int> _velocity_threshold_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cycle_time_;
  int external_control_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// -------------------------------------------------------------------

class OpenControlChannelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.OpenControlChannelResponse) */ {
 public:
  inline OpenControlChannelResponse() : OpenControlChannelResponse(nullptr) {};
  virtual ~OpenControlChannelResponse();

  OpenControlChannelResponse(const OpenControlChannelResponse& from);
  OpenControlChannelResponse(OpenControlChannelResponse&& from) noexcept
    : OpenControlChannelResponse() {
    *this = ::std::move(from);
  }

  inline OpenControlChannelResponse& operator=(const OpenControlChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenControlChannelResponse& operator=(OpenControlChannelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenControlChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenControlChannelResponse* internal_default_instance() {
    return reinterpret_cast<const OpenControlChannelResponse*>(
               &_OpenControlChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpenControlChannelResponse& a, OpenControlChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenControlChannelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenControlChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenControlChannelResponse* New() const final {
    return CreateMaybeMessage<OpenControlChannelResponse>(nullptr);
  }

  OpenControlChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenControlChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenControlChannelResponse& from);
  void MergeFrom(const OpenControlChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenControlChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.OpenControlChannelResponse";
  }
  protected:
  explicit OpenControlChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.OpenControlChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// -------------------------------------------------------------------

class StartMonitoringRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.StartMonitoringRequest) */ {
 public:
  inline StartMonitoringRequest() : StartMonitoringRequest(nullptr) {};
  virtual ~StartMonitoringRequest();

  StartMonitoringRequest(const StartMonitoringRequest& from);
  StartMonitoringRequest(StartMonitoringRequest&& from) noexcept
    : StartMonitoringRequest() {
    *this = ::std::move(from);
  }

  inline StartMonitoringRequest& operator=(const StartMonitoringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMonitoringRequest& operator=(StartMonitoringRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMonitoringRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartMonitoringRequest* internal_default_instance() {
    return reinterpret_cast<const StartMonitoringRequest*>(
               &_StartMonitoringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartMonitoringRequest& a, StartMonitoringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMonitoringRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMonitoringRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartMonitoringRequest* New() const final {
    return CreateMaybeMessage<StartMonitoringRequest>(nullptr);
  }

  StartMonitoringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMonitoringRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMonitoringRequest& from);
  void MergeFrom(const StartMonitoringRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMonitoringRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.StartMonitoringRequest";
  }
  protected:
  explicit StartMonitoringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.StartMonitoringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// -------------------------------------------------------------------

class StartMonitoringResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.StartMonitoringResponse) */ {
 public:
  inline StartMonitoringResponse() : StartMonitoringResponse(nullptr) {};
  virtual ~StartMonitoringResponse();

  StartMonitoringResponse(const StartMonitoringResponse& from);
  StartMonitoringResponse(StartMonitoringResponse&& from) noexcept
    : StartMonitoringResponse() {
    *this = ::std::move(from);
  }

  inline StartMonitoringResponse& operator=(const StartMonitoringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMonitoringResponse& operator=(StartMonitoringResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMonitoringResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartMonitoringResponse* internal_default_instance() {
    return reinterpret_cast<const StartMonitoringResponse*>(
               &_StartMonitoringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartMonitoringResponse& a, StartMonitoringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMonitoringResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMonitoringResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartMonitoringResponse* New() const final {
    return CreateMaybeMessage<StartMonitoringResponse>(nullptr);
  }

  StartMonitoringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMonitoringResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMonitoringResponse& from);
  void MergeFrom(const StartMonitoringResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMonitoringResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.StartMonitoringResponse";
  }
  protected:
  explicit StartMonitoringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.StartMonitoringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// -------------------------------------------------------------------

class StopMonitoringRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.StopMonitoringRequest) */ {
 public:
  inline StopMonitoringRequest() : StopMonitoringRequest(nullptr) {};
  virtual ~StopMonitoringRequest();

  StopMonitoringRequest(const StopMonitoringRequest& from);
  StopMonitoringRequest(StopMonitoringRequest&& from) noexcept
    : StopMonitoringRequest() {
    *this = ::std::move(from);
  }

  inline StopMonitoringRequest& operator=(const StopMonitoringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopMonitoringRequest& operator=(StopMonitoringRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopMonitoringRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopMonitoringRequest* internal_default_instance() {
    return reinterpret_cast<const StopMonitoringRequest*>(
               &_StopMonitoringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopMonitoringRequest& a, StopMonitoringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopMonitoringRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopMonitoringRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopMonitoringRequest* New() const final {
    return CreateMaybeMessage<StopMonitoringRequest>(nullptr);
  }

  StopMonitoringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopMonitoringRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopMonitoringRequest& from);
  void MergeFrom(const StopMonitoringRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopMonitoringRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.StopMonitoringRequest";
  }
  protected:
  explicit StopMonitoringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.StopMonitoringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// -------------------------------------------------------------------

class StopMonitoringResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.StopMonitoringResponse) */ {
 public:
  inline StopMonitoringResponse() : StopMonitoringResponse(nullptr) {};
  virtual ~StopMonitoringResponse();

  StopMonitoringResponse(const StopMonitoringResponse& from);
  StopMonitoringResponse(StopMonitoringResponse&& from) noexcept
    : StopMonitoringResponse() {
    *this = ::std::move(from);
  }

  inline StopMonitoringResponse& operator=(const StopMonitoringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopMonitoringResponse& operator=(StopMonitoringResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopMonitoringResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopMonitoringResponse* internal_default_instance() {
    return reinterpret_cast<const StopMonitoringResponse*>(
               &_StopMonitoringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopMonitoringResponse& a, StopMonitoringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopMonitoringResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopMonitoringResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopMonitoringResponse* New() const final {
    return CreateMaybeMessage<StopMonitoringResponse>(nullptr);
  }

  StopMonitoringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopMonitoringResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopMonitoringResponse& from);
  void MergeFrom(const StopMonitoringResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopMonitoringResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.StopMonitoringResponse";
  }
  protected:
  explicit StopMonitoringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.StopMonitoringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// -------------------------------------------------------------------

class ObserveControlStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.ObserveControlStateRequest) */ {
 public:
  inline ObserveControlStateRequest() : ObserveControlStateRequest(nullptr) {};
  virtual ~ObserveControlStateRequest();

  ObserveControlStateRequest(const ObserveControlStateRequest& from);
  ObserveControlStateRequest(ObserveControlStateRequest&& from) noexcept
    : ObserveControlStateRequest() {
    *this = ::std::move(from);
  }

  inline ObserveControlStateRequest& operator=(const ObserveControlStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveControlStateRequest& operator=(ObserveControlStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveControlStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObserveControlStateRequest* internal_default_instance() {
    return reinterpret_cast<const ObserveControlStateRequest*>(
               &_ObserveControlStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObserveControlStateRequest& a, ObserveControlStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveControlStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveControlStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveControlStateRequest* New() const final {
    return CreateMaybeMessage<ObserveControlStateRequest>(nullptr);
  }

  ObserveControlStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveControlStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveControlStateRequest& from);
  void MergeFrom(const ObserveControlStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveControlStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.ObserveControlStateRequest";
  }
  protected:
  explicit ObserveControlStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.ObserveControlStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// -------------------------------------------------------------------

class CommandState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kuka.ecs.v1.CommandState) */ {
 public:
  inline CommandState() : CommandState(nullptr) {};
  virtual ~CommandState();

  CommandState(const CommandState& from);
  CommandState(CommandState&& from) noexcept
    : CommandState() {
    *this = ::std::move(from);
  }

  inline CommandState& operator=(const CommandState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandState& operator=(CommandState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandState* internal_default_instance() {
    return reinterpret_cast<const CommandState*>(
               &_CommandState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandState& a, CommandState& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandState* New() const final {
    return CreateMaybeMessage<CommandState>(nullptr);
  }

  CommandState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandState& from);
  void MergeFrom(const CommandState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kuka.ecs.v1.CommandState";
  }
  protected:
  explicit CommandState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto);
    return ::descriptor_table_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kEventFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .kuka.ecs.v1.CommandEvent event = 1;
  void clear_event();
  ::kuka::ecs::v1::CommandEvent event() const;
  void set_event(::kuka::ecs::v1::CommandEvent value);
  private:
  ::kuka::ecs::v1::CommandEvent _internal_event() const;
  void _internal_set_event(::kuka::ecs::v1::CommandEvent value);
  public:

  // @@protoc_insertion_point(class_scope:kuka.ecs.v1.CommandState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenControlChannelRequest

// uint32 timeout = 1;
inline void OpenControlChannelRequest::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenControlChannelRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenControlChannelRequest::timeout() const {
  // @@protoc_insertion_point(field_get:kuka.ecs.v1.OpenControlChannelRequest.timeout)
  return _internal_timeout();
}
inline void OpenControlChannelRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  timeout_ = value;
}
inline void OpenControlChannelRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kuka.ecs.v1.OpenControlChannelRequest.timeout)
}

// uint32 cycle_time = 2;
inline void OpenControlChannelRequest::clear_cycle_time() {
  cycle_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenControlChannelRequest::_internal_cycle_time() const {
  return cycle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenControlChannelRequest::cycle_time() const {
  // @@protoc_insertion_point(field_get:kuka.ecs.v1.OpenControlChannelRequest.cycle_time)
  return _internal_cycle_time();
}
inline void OpenControlChannelRequest::_internal_set_cycle_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  cycle_time_ = value;
}
inline void OpenControlChannelRequest::set_cycle_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cycle_time(value);
  // @@protoc_insertion_point(field_set:kuka.ecs.v1.OpenControlChannelRequest.cycle_time)
}

// .kuka.motion.external.ExternalControlMode external_control_mode = 3;
inline void OpenControlChannelRequest::clear_external_control_mode() {
  external_control_mode_ = 0;
}
inline ::kuka::motion::external::ExternalControlMode OpenControlChannelRequest::_internal_external_control_mode() const {
  return static_cast< ::kuka::motion::external::ExternalControlMode >(external_control_mode_);
}
inline ::kuka::motion::external::ExternalControlMode OpenControlChannelRequest::external_control_mode() const {
  // @@protoc_insertion_point(field_get:kuka.ecs.v1.OpenControlChannelRequest.external_control_mode)
  return _internal_external_control_mode();
}
inline void OpenControlChannelRequest::_internal_set_external_control_mode(::kuka::motion::external::ExternalControlMode value) {

  external_control_mode_ = value;
}
inline void OpenControlChannelRequest::set_external_control_mode(::kuka::motion::external::ExternalControlMode value) {
  _internal_set_external_control_mode(value);
  // @@protoc_insertion_point(field_set:kuka.ecs.v1.OpenControlChannelRequest.external_control_mode)
}

// repeated double velocity_threshold = 4;
inline int OpenControlChannelRequest::_internal_velocity_threshold_size() const {
  return velocity_threshold_.size();
}
inline int OpenControlChannelRequest::velocity_threshold_size() const {
  return _internal_velocity_threshold_size();
}
inline void OpenControlChannelRequest::clear_velocity_threshold() {
  velocity_threshold_.Clear();
}
inline double OpenControlChannelRequest::_internal_velocity_threshold(int index) const {
  return velocity_threshold_.Get(index);
}
inline double OpenControlChannelRequest::velocity_threshold(int index) const {
  // @@protoc_insertion_point(field_get:kuka.ecs.v1.OpenControlChannelRequest.velocity_threshold)
  return _internal_velocity_threshold(index);
}
inline void OpenControlChannelRequest::set_velocity_threshold(int index, double value) {
  velocity_threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:kuka.ecs.v1.OpenControlChannelRequest.velocity_threshold)
}
inline void OpenControlChannelRequest::_internal_add_velocity_threshold(double value) {
  velocity_threshold_.Add(value);
}
inline void OpenControlChannelRequest::add_velocity_threshold(double value) {
  _internal_add_velocity_threshold(value);
  // @@protoc_insertion_point(field_add:kuka.ecs.v1.OpenControlChannelRequest.velocity_threshold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
OpenControlChannelRequest::_internal_velocity_threshold() const {
  return velocity_threshold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
OpenControlChannelRequest::velocity_threshold() const {
  // @@protoc_insertion_point(field_list:kuka.ecs.v1.OpenControlChannelRequest.velocity_threshold)
  return _internal_velocity_threshold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
OpenControlChannelRequest::_internal_mutable_velocity_threshold() {
  return &velocity_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
OpenControlChannelRequest::mutable_velocity_threshold() {
  // @@protoc_insertion_point(field_mutable_list:kuka.ecs.v1.OpenControlChannelRequest.velocity_threshold)
  return _internal_mutable_velocity_threshold();
}

// -------------------------------------------------------------------

// OpenControlChannelResponse

// -------------------------------------------------------------------

// StartMonitoringRequest

// -------------------------------------------------------------------

// StartMonitoringResponse

// -------------------------------------------------------------------

// StopMonitoringRequest

// -------------------------------------------------------------------

// StopMonitoringResponse

// -------------------------------------------------------------------

// ObserveControlStateRequest

// -------------------------------------------------------------------

// CommandState

// .kuka.ecs.v1.CommandEvent event = 1;
inline void CommandState::clear_event() {
  event_ = 0;
}
inline ::kuka::ecs::v1::CommandEvent CommandState::_internal_event() const {
  return static_cast< ::kuka::ecs::v1::CommandEvent >(event_);
}
inline ::kuka::ecs::v1::CommandEvent CommandState::event() const {
  // @@protoc_insertion_point(field_get:kuka.ecs.v1.CommandState.event)
  return _internal_event();
}
inline void CommandState::_internal_set_event(::kuka::ecs::v1::CommandEvent value) {

  event_ = value;
}
inline void CommandState::set_event(::kuka::ecs::v1::CommandEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:kuka.ecs.v1.CommandState.event)
}

// string message = 2;
inline void CommandState::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommandState::message() const {
  // @@protoc_insertion_point(field_get:kuka.ecs.v1.CommandState.message)
  return _internal_message();
}
inline void CommandState::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:kuka.ecs.v1.CommandState.message)
}
inline std::string* CommandState::mutable_message() {
  // @@protoc_insertion_point(field_mutable:kuka.ecs.v1.CommandState.message)
  return _internal_mutable_message();
}
inline const std::string& CommandState::_internal_message() const {
  return message_.Get();
}
inline void CommandState::_internal_set_message(const std::string& value) {

  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandState::set_message(std::string&& value) {

  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kuka.ecs.v1.CommandState.message)
}
inline void CommandState::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kuka.ecs.v1.CommandState.message)
}
inline void CommandState::set_message(const char* value,
    size_t size) {

  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kuka.ecs.v1.CommandState.message)
}
inline std::string* CommandState::_internal_mutable_message() {

  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandState::release_message() {
  // @@protoc_insertion_point(field_release:kuka.ecs.v1.CommandState.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandState::set_allocated_message(std::string* message) {
  if (message != nullptr) {

  } else {

  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kuka.ecs.v1.CommandState.message)
}
inline std::string* CommandState::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kuka.ecs.v1.CommandState.message)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommandState::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {

  } else {

  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kuka.ecs.v1.CommandState.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace ecs
}  // namespace kuka

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kuka::ecs::v1::CommandEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kuka::ecs::v1::CommandEvent>() {
  return ::kuka::ecs::v1::CommandEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto
