// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kuka/ecs/v1/motion_services_ecs.proto
// Original file comments:
// This material is the exclusive property of KUKA.
// Except as expressly permitted by separate agreement, this material
// may only be used by members of the development department of KUKA
// for internal development purposes of KUKA.
//
// Copyright (C) KUKA. All Rights Reserved.
//
#ifndef GRPC_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto__INCLUDED
#define GRPC_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto__INCLUDED

#include "kuka/ecs/v1/motion_services_ecs.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace kuka {
namespace ecs {
namespace v1 {

// External control gRPC Service
class ExternalControlService final {
 public:
  static constexpr char const* service_full_name() {
    return "kuka.ecs.v1.ExternalControlService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Start external control
    virtual ::grpc::Status OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::kuka::ecs::v1::OpenControlChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::OpenControlChannelResponse>> AsyncOpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::OpenControlChannelResponse>>(AsyncOpenControlChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::OpenControlChannelResponse>> PrepareAsyncOpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::OpenControlChannelResponse>>(PrepareAsyncOpenControlChannelRaw(context, request, cq));
    }
    // Observe external control state
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kuka::ecs::v1::CommandState>> ObserveControlState(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kuka::ecs::v1::CommandState>>(ObserveControlStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kuka::ecs::v1::CommandState>> AsyncObserveControlState(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kuka::ecs::v1::CommandState>>(AsyncObserveControlStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kuka::ecs::v1::CommandState>> PrepareAsyncObserveControlState(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kuka::ecs::v1::CommandState>>(PrepareAsyncObserveControlStateRaw(context, request, cq));
    }
    // Start External motinoring
    virtual ::grpc::Status StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::kuka::ecs::v1::StartMonitoringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StartMonitoringResponse>> AsyncStartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StartMonitoringResponse>>(AsyncStartMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StartMonitoringResponse>> PrepareAsyncStartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StartMonitoringResponse>>(PrepareAsyncStartMonitoringRaw(context, request, cq));
    }
    // Stop External monitoring
    virtual ::grpc::Status StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::kuka::ecs::v1::StopMonitoringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StopMonitoringResponse>> AsyncStopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StopMonitoringResponse>>(AsyncStopMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StopMonitoringResponse>> PrepareAsyncStopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StopMonitoringResponse>>(PrepareAsyncStopMonitoringRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Start external control
      virtual void OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenControlChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenControlChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenControlChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Observe external control state
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ObserveControlState(::grpc::ClientContext* context, ::kuka::ecs::v1::ObserveControlStateRequest* request, ::grpc::ClientReadReactor< ::kuka::ecs::v1::CommandState>* reactor) = 0;
      #else
      virtual void ObserveControlState(::grpc::ClientContext* context, ::kuka::ecs::v1::ObserveControlStateRequest* request, ::grpc::experimental::ClientReadReactor< ::kuka::ecs::v1::CommandState>* reactor) = 0;
      #endif
      // Start External motinoring
      virtual void StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StartMonitoringResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stop External monitoring
      virtual void StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StopMonitoringResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::OpenControlChannelResponse>* AsyncOpenControlChannelRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::OpenControlChannelResponse>* PrepareAsyncOpenControlChannelRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::kuka::ecs::v1::CommandState>* ObserveControlStateRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kuka::ecs::v1::CommandState>* AsyncObserveControlStateRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kuka::ecs::v1::CommandState>* PrepareAsyncObserveControlStateRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StartMonitoringResponse>* AsyncStartMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StartMonitoringResponse>* PrepareAsyncStartMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StopMonitoringResponse>* AsyncStopMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kuka::ecs::v1::StopMonitoringResponse>* PrepareAsyncStopMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::kuka::ecs::v1::OpenControlChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::OpenControlChannelResponse>> AsyncOpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::OpenControlChannelResponse>>(AsyncOpenControlChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::OpenControlChannelResponse>> PrepareAsyncOpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::OpenControlChannelResponse>>(PrepareAsyncOpenControlChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::kuka::ecs::v1::CommandState>> ObserveControlState(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kuka::ecs::v1::CommandState>>(ObserveControlStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kuka::ecs::v1::CommandState>> AsyncObserveControlState(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kuka::ecs::v1::CommandState>>(AsyncObserveControlStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kuka::ecs::v1::CommandState>> PrepareAsyncObserveControlState(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kuka::ecs::v1::CommandState>>(PrepareAsyncObserveControlStateRaw(context, request, cq));
    }
    ::grpc::Status StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::kuka::ecs::v1::StartMonitoringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StartMonitoringResponse>> AsyncStartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StartMonitoringResponse>>(AsyncStartMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StartMonitoringResponse>> PrepareAsyncStartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StartMonitoringResponse>>(PrepareAsyncStartMonitoringRaw(context, request, cq));
    }
    ::grpc::Status StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::kuka::ecs::v1::StopMonitoringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StopMonitoringResponse>> AsyncStopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StopMonitoringResponse>>(AsyncStopMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StopMonitoringResponse>> PrepareAsyncStopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StopMonitoringResponse>>(PrepareAsyncStopMonitoringRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void OpenControlChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenControlChannel(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenControlChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenControlChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::OpenControlChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ObserveControlState(::grpc::ClientContext* context, ::kuka::ecs::v1::ObserveControlStateRequest* request, ::grpc::ClientReadReactor< ::kuka::ecs::v1::CommandState>* reactor) override;
      #else
      void ObserveControlState(::grpc::ClientContext* context, ::kuka::ecs::v1::ObserveControlStateRequest* request, ::grpc::experimental::ClientReadReactor< ::kuka::ecs::v1::CommandState>* reactor) override;
      #endif
      void StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response, std::function<void(::grpc::Status)>) override;
      void StartMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StartMonitoringResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StartMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response, std::function<void(::grpc::Status)>) override;
      void StopMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StopMonitoringResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopMonitoring(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopMonitoring(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kuka::ecs::v1::StopMonitoringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::OpenControlChannelResponse>* AsyncOpenControlChannelRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::OpenControlChannelResponse>* PrepareAsyncOpenControlChannelRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::kuka::ecs::v1::CommandState>* ObserveControlStateRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request) override;
    ::grpc::ClientAsyncReader< ::kuka::ecs::v1::CommandState>* AsyncObserveControlStateRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kuka::ecs::v1::CommandState>* PrepareAsyncObserveControlStateRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StartMonitoringResponse>* AsyncStartMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StartMonitoringResponse>* PrepareAsyncStartMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StartMonitoringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StopMonitoringResponse>* AsyncStopMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kuka::ecs::v1::StopMonitoringResponse>* PrepareAsyncStopMonitoringRaw(::grpc::ClientContext* context, const ::kuka::ecs::v1::StopMonitoringRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OpenControlChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_ObserveControlState_;
    const ::grpc::internal::RpcMethod rpcmethod_StartMonitoring_;
    const ::grpc::internal::RpcMethod rpcmethod_StopMonitoring_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Start external control
    virtual ::grpc::Status OpenControlChannel(::grpc::ServerContext* context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response);
    // Observe external control state
    virtual ::grpc::Status ObserveControlState(::grpc::ServerContext* context, const ::kuka::ecs::v1::ObserveControlStateRequest* request, ::grpc::ServerWriter< ::kuka::ecs::v1::CommandState>* writer);
    // Start External motinoring
    virtual ::grpc::Status StartMonitoring(::grpc::ServerContext* context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response);
    // Stop External monitoring
    virtual ::grpc::Status StopMonitoring(::grpc::ServerContext* context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenControlChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OpenControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenControlChannel(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenControlChannel(::grpc::ServerContext* context, ::kuka::ecs::v1::OpenControlChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::kuka::ecs::v1::OpenControlChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ObserveControlState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ObserveControlState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ObserveControlState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveControlState(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/, ::grpc::ServerWriter< ::kuka::ecs::v1::CommandState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserveControlState(::grpc::ServerContext* context, ::kuka::ecs::v1::ObserveControlStateRequest* request, ::grpc::ServerAsyncWriter< ::kuka::ecs::v1::CommandState>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartMonitoring() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StartMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartMonitoring(::grpc::ServerContext* context, ::kuka::ecs::v1::StartMonitoringRequest* request, ::grpc::ServerAsyncResponseWriter< ::kuka::ecs::v1::StartMonitoringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopMonitoring() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StopMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopMonitoring(::grpc::ServerContext* context, ::kuka::ecs::v1::StopMonitoringRequest* request, ::grpc::ServerAsyncResponseWriter< ::kuka::ecs::v1::StopMonitoringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OpenControlChannel<WithAsyncMethod_ObserveControlState<WithAsyncMethod_StartMonitoring<WithAsyncMethod_StopMonitoring<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OpenControlChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::kuka::ecs::v1::OpenControlChannelRequest, ::kuka::ecs::v1::OpenControlChannelResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kuka::ecs::v1::OpenControlChannelRequest* request, ::kuka::ecs::v1::OpenControlChannelResponse* response) { return this->OpenControlChannel(context, request, response); }));}
    void SetMessageAllocatorFor_OpenControlChannel(
        ::grpc::experimental::MessageAllocator< ::kuka::ecs::v1::OpenControlChannelRequest, ::kuka::ecs::v1::OpenControlChannelResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::kuka::ecs::v1::OpenControlChannelRequest, ::kuka::ecs::v1::OpenControlChannelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OpenControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenControlChannel(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenControlChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenControlChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ObserveControlState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ObserveControlState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::kuka::ecs::v1::ObserveControlStateRequest, ::kuka::ecs::v1::CommandState>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kuka::ecs::v1::ObserveControlStateRequest* request) { return this->ObserveControlState(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ObserveControlState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveControlState(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/, ::grpc::ServerWriter< ::kuka::ecs::v1::CommandState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::kuka::ecs::v1::CommandState>* ObserveControlState(
      ::grpc::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::kuka::ecs::v1::CommandState>* ObserveControlState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartMonitoring() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::kuka::ecs::v1::StartMonitoringRequest, ::kuka::ecs::v1::StartMonitoringResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kuka::ecs::v1::StartMonitoringRequest* request, ::kuka::ecs::v1::StartMonitoringResponse* response) { return this->StartMonitoring(context, request, response); }));}
    void SetMessageAllocatorFor_StartMonitoring(
        ::grpc::experimental::MessageAllocator< ::kuka::ecs::v1::StartMonitoringRequest, ::kuka::ecs::v1::StartMonitoringResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::kuka::ecs::v1::StartMonitoringRequest, ::kuka::ecs::v1::StartMonitoringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartMonitoring(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopMonitoring() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::kuka::ecs::v1::StopMonitoringRequest, ::kuka::ecs::v1::StopMonitoringResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kuka::ecs::v1::StopMonitoringRequest* request, ::kuka::ecs::v1::StopMonitoringResponse* response) { return this->StopMonitoring(context, request, response); }));}
    void SetMessageAllocatorFor_StopMonitoring(
        ::grpc::experimental::MessageAllocator< ::kuka::ecs::v1::StopMonitoringRequest, ::kuka::ecs::v1::StopMonitoringResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::kuka::ecs::v1::StopMonitoringRequest, ::kuka::ecs::v1::StopMonitoringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopMonitoring(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_OpenControlChannel<ExperimentalWithCallbackMethod_ObserveControlState<ExperimentalWithCallbackMethod_StartMonitoring<ExperimentalWithCallbackMethod_StopMonitoring<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_OpenControlChannel<ExperimentalWithCallbackMethod_ObserveControlState<ExperimentalWithCallbackMethod_StartMonitoring<ExperimentalWithCallbackMethod_StopMonitoring<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OpenControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenControlChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OpenControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenControlChannel(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ObserveControlState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ObserveControlState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ObserveControlState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveControlState(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/, ::grpc::ServerWriter< ::kuka::ecs::v1::CommandState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartMonitoring() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StartMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopMonitoring() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StopMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenControlChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OpenControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenControlChannel(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenControlChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ObserveControlState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ObserveControlState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ObserveControlState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveControlState(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/, ::grpc::ServerWriter< ::kuka::ecs::v1::CommandState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserveControlState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartMonitoring() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StartMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartMonitoring(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopMonitoring() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StopMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopMonitoring(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenControlChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenControlChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenControlChannel(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenControlChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenControlChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ObserveControlState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ObserveControlState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ObserveControlState(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ObserveControlState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserveControlState(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/, ::grpc::ServerWriter< ::kuka::ecs::v1::CommandState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ObserveControlState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ObserveControlState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartMonitoring() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartMonitoring(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartMonitoring(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopMonitoring() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopMonitoring(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopMonitoring(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenControlChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kuka::ecs::v1::OpenControlChannelRequest, ::kuka::ecs::v1::OpenControlChannelResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::kuka::ecs::v1::OpenControlChannelRequest, ::kuka::ecs::v1::OpenControlChannelResponse>* streamer) {
                       return this->StreamedOpenControlChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenControlChannel(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::OpenControlChannelRequest* /*request*/, ::kuka::ecs::v1::OpenControlChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenControlChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kuka::ecs::v1::OpenControlChannelRequest,::kuka::ecs::v1::OpenControlChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartMonitoring() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kuka::ecs::v1::StartMonitoringRequest, ::kuka::ecs::v1::StartMonitoringResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::kuka::ecs::v1::StartMonitoringRequest, ::kuka::ecs::v1::StartMonitoringResponse>* streamer) {
                       return this->StreamedStartMonitoring(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StartMonitoringRequest* /*request*/, ::kuka::ecs::v1::StartMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartMonitoring(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kuka::ecs::v1::StartMonitoringRequest,::kuka::ecs::v1::StartMonitoringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopMonitoring() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kuka::ecs::v1::StopMonitoringRequest, ::kuka::ecs::v1::StopMonitoringResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::kuka::ecs::v1::StopMonitoringRequest, ::kuka::ecs::v1::StopMonitoringResponse>* streamer) {
                       return this->StreamedStopMonitoring(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopMonitoring(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::StopMonitoringRequest* /*request*/, ::kuka::ecs::v1::StopMonitoringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopMonitoring(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kuka::ecs::v1::StopMonitoringRequest,::kuka::ecs::v1::StopMonitoringResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OpenControlChannel<WithStreamedUnaryMethod_StartMonitoring<WithStreamedUnaryMethod_StopMonitoring<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ObserveControlState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ObserveControlState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kuka::ecs::v1::ObserveControlStateRequest, ::kuka::ecs::v1::CommandState>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::kuka::ecs::v1::ObserveControlStateRequest, ::kuka::ecs::v1::CommandState>* streamer) {
                       return this->StreamedObserveControlState(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ObserveControlState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ObserveControlState(::grpc::ServerContext* /*context*/, const ::kuka::ecs::v1::ObserveControlStateRequest* /*request*/, ::grpc::ServerWriter< ::kuka::ecs::v1::CommandState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedObserveControlState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kuka::ecs::v1::ObserveControlStateRequest,::kuka::ecs::v1::CommandState>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ObserveControlState<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_OpenControlChannel<WithSplitStreamingMethod_ObserveControlState<WithStreamedUnaryMethod_StartMonitoring<WithStreamedUnaryMethod_StopMonitoring<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace ecs
}  // namespace kuka


#endif  // GRPC_kuka_2fecs_2fv1_2fmotion_5fservices_5fecs_2eproto__INCLUDED
